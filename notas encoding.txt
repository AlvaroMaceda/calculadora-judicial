Los ficheros vienen en binario, aunque no lo son.
Esto se supone que debería funcionar para transformar la cadena:
.encode("UTF-8", "ASCII-8BIT")

External encoding: what the encoding of the file is at the point we open it
Cuando haces:
File.open('whatever','r:iso-8859-1:utf-8')
Le dices que el fichero está en iso-8859 pero que quieres el texto en utf-8
Si no, te lo devolvería en iso-8859

@io.respond_to? :internal_encoding => TRUE!!!!!
@io.class.name = "TempFile"

file = Rack::Test::UploadedFile.new filename, 'text/csv'
params[:csv_file].tempfile



encoding
internal_encoding => Este es el que más manda

En initialize:
@encoding = determine_encoding(encoding, internal_encoding)


  def determine_encoding(encoding, internal_encoding)
    # honor the IO encoding if we can, otherwise default to ASCII-8BIT
    io_encoding = raw_encoding
    return io_encoding if io_encoding

    return Encoding.find(internal_encoding) if internal_encoding

    if encoding
      encoding, = encoding.split(":", 2) if encoding.is_a?(String)
      return Encoding.find(encoding)
    end

    Encoding.default_internal || Encoding.default_external
  end


  #
  # Returns the encoding of the internal IO object.
  #
  def raw_encoding
    if @io.respond_to? :internal_encoding
      @io.internal_encoding || @io.external_encoding
    elsif @io.respond_to? :encoding
      @io.encoding
    else
      nil
    end
  end

