FROM ruby:2.6.3-slim as builder

ENV NODE_ENV=production RAILS_ENV=production
ARG RAILS_MASTER_KEY

RUN apt-get update -qq && apt-get install -y build-essential \
    libpq-dev curl
RUN curl -sL https://deb.nodesource.com/setup_8.x | bin/bash -\
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | \
    apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | \
    tee /etc/apt/sources.list.d/yarn.list \
    && apt-get update -qq && apt-get install -y nodejs yarn
    
RUN mkdir /app
WORKDIR /app

COPY Gemfile Gemfile.lock /app/
RUN bundle install -j 4 -without development test -deployment --path=vendor/bundle
COPY package.json yarn.lock /app/
RUN yarn install --pure-lockfile --production
COPY . /app
RUN bundle exec rails assets:precompile

# ************ Multi Stage **************
FROM ruby:2.6.3-slim

ENV NODE_ENV=production RAILS_ENV=production
ENV RAILS_LOG_TO_STDOUT=true

RUN apt-get update -qq && apt-get install -y libpq-dev nodejs \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN mkdir /app
WORKDIR /app

# ***Copy only necessary files (.dockerignore donâ€™t work in multistage)***
COPY --from=builder /app/app /app/app
COPY --from=builder /app/config /app/config
COPY --from=builder /app/bin /app/bin
COPY --from=builder /app/db /app/db
COPY --from=builder /app/lib /app/lib
COPY --from=builder /app/storage /app/storage
COPY --from=builder /app/vendor /app/vendor
COPY --from=builder /app/public /app/public
COPY --from=builder /app/Gemfile /app/Gemfile.lock /app/

CMD [ "sh", "-c", "bundle exec rake db:create db:migrate && bundle exec rails server -b 0.0.0.0" ]